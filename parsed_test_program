translation_unit [Point(row=0, column=0), Point(row=47, column=1)]
  preproc_include [Point(row=0, column=0), Point(row=1, column=0)]
    #include [Point(row=0, column=0), Point(row=0, column=8)]
    system_lib_string [Point(row=0, column=9), Point(row=0, column=18)]
  preproc_include [Point(row=1, column=0), Point(row=2, column=0)]
    #include [Point(row=1, column=0), Point(row=1, column=8)]
    system_lib_string [Point(row=1, column=9), Point(row=1, column=19)]
  declaration [Point(row=3, column=0), Point(row=3, column=11)]
    primitive_type [Point(row=3, column=0), Point(row=3, column=3)]
    identifier [Point(row=3, column=4), Point(row=3, column=10)]
    ; [Point(row=3, column=10), Point(row=3, column=11)]
  function_definition [Point(row=5, column=0), Point(row=8, column=1)]
    primitive_type [Point(row=5, column=0), Point(row=5, column=3)]
    function_declarator [Point(row=6, column=0), Point(row=6, column=3)]
      identifier [Point(row=6, column=0), Point(row=6, column=1)]
      parameter_list [Point(row=6, column=1), Point(row=6, column=3)]
        ( [Point(row=6, column=1), Point(row=6, column=2)]
        ) [Point(row=6, column=2), Point(row=6, column=3)]
    compound_statement [Point(row=6, column=4), Point(row=8, column=1)]
      { [Point(row=6, column=4), Point(row=6, column=5)]
      return_statement [Point(row=7, column=2), Point(row=7, column=16)]
        return [Point(row=7, column=2), Point(row=7, column=8)]
        identifier [Point(row=7, column=9), Point(row=7, column=15)]
        ; [Point(row=7, column=15), Point(row=7, column=16)]
      } [Point(row=8, column=0), Point(row=8, column=1)]
  function_definition [Point(row=10, column=0), Point(row=36, column=1)]
    primitive_type [Point(row=10, column=0), Point(row=10, column=3)]
    function_declarator [Point(row=11, column=0), Point(row=11, column=11)]
      identifier [Point(row=11, column=0), Point(row=11, column=4)]
      parameter_list [Point(row=11, column=4), Point(row=11, column=11)]
        ( [Point(row=11, column=4), Point(row=11, column=5)]
        parameter_declaration [Point(row=11, column=5), Point(row=11, column=10)]
          primitive_type [Point(row=11, column=5), Point(row=11, column=8)]
          identifier [Point(row=11, column=9), Point(row=11, column=10)]
        ) [Point(row=11, column=10), Point(row=11, column=11)]
    compound_statement [Point(row=11, column=12), Point(row=36, column=1)]
      { [Point(row=11, column=12), Point(row=11, column=13)]
      declaration [Point(row=12, column=2), Point(row=12, column=14)]
        primitive_type [Point(row=12, column=2), Point(row=12, column=5)]
        init_declarator [Point(row=12, column=6), Point(row=12, column=13)]
          identifier [Point(row=12, column=6), Point(row=12, column=7)]
          = [Point(row=12, column=8), Point(row=12, column=9)]
          call_expression [Point(row=12, column=10), Point(row=12, column=13)]
            identifier [Point(row=12, column=10), Point(row=12, column=11)]
            argument_list [Point(row=12, column=11), Point(row=12, column=13)]
              ( [Point(row=12, column=11), Point(row=12, column=12)]
              ) [Point(row=12, column=12), Point(row=12, column=13)]
        ; [Point(row=12, column=13), Point(row=12, column=14)]
      if_statement [Point(row=13, column=2), Point(row=33, column=3)]
        if [Point(row=13, column=2), Point(row=13, column=4)]
        parenthesized_expression [Point(row=13, column=5), Point(row=13, column=12)]
          ( [Point(row=13, column=5), Point(row=13, column=6)]
          binary_expression [Point(row=13, column=6), Point(row=13, column=11)]
            identifier [Point(row=13, column=6), Point(row=13, column=7)]
            > [Point(row=13, column=8), Point(row=13, column=9)]
            identifier [Point(row=13, column=10), Point(row=13, column=11)]
          ) [Point(row=13, column=11), Point(row=13, column=12)]
        compound_statement [Point(row=13, column=13), Point(row=33, column=3)]
          { [Point(row=13, column=13), Point(row=13, column=14)]
          declaration [Point(row=14, column=4), Point(row=14, column=14)]
            primitive_type [Point(row=14, column=4), Point(row=14, column=7)]
            init_declarator [Point(row=14, column=8), Point(row=14, column=13)]
              identifier [Point(row=14, column=8), Point(row=14, column=9)]
              = [Point(row=14, column=10), Point(row=14, column=11)]
              number_literal [Point(row=14, column=12), Point(row=14, column=13)]
            ; [Point(row=14, column=13), Point(row=14, column=14)]
          while_statement [Point(row=15, column=4), Point(row=18, column=5)]
            while [Point(row=15, column=4), Point(row=15, column=9)]
            parenthesized_expression [Point(row=15, column=10), Point(row=15, column=18)]
              ( [Point(row=15, column=10), Point(row=15, column=11)]
              binary_expression [Point(row=15, column=11), Point(row=15, column=17)]
                identifier [Point(row=15, column=11), Point(row=15, column=12)]
                < [Point(row=15, column=13), Point(row=15, column=14)]
                number_literal [Point(row=15, column=15), Point(row=15, column=17)]
              ) [Point(row=15, column=17), Point(row=15, column=18)]
            compound_statement [Point(row=15, column=19), Point(row=18, column=5)]
              { [Point(row=15, column=19), Point(row=15, column=20)]
              expression_statement [Point(row=16, column=6), Point(row=16, column=10)]
                update_expression [Point(row=16, column=6), Point(row=16, column=9)]
                  identifier [Point(row=16, column=6), Point(row=16, column=7)]
                  -- [Point(row=16, column=7), Point(row=16, column=9)]
                ; [Point(row=16, column=9), Point(row=16, column=10)]
              expression_statement [Point(row=17, column=6), Point(row=17, column=10)]
                update_expression [Point(row=17, column=6), Point(row=17, column=9)]
                  identifier [Point(row=17, column=6), Point(row=17, column=7)]
                  ++ [Point(row=17, column=7), Point(row=17, column=9)]
                ; [Point(row=17, column=9), Point(row=17, column=10)]
              } [Point(row=18, column=4), Point(row=18, column=5)]
          if_statement [Point(row=20, column=4), Point(row=32, column=5)]
            if [Point(row=20, column=4), Point(row=20, column=6)]
            parenthesized_expression [Point(row=20, column=7), Point(row=20, column=15)]
              ( [Point(row=20, column=7), Point(row=20, column=8)]
              binary_expression [Point(row=20, column=8), Point(row=20, column=14)]
                identifier [Point(row=20, column=8), Point(row=20, column=9)]
                == [Point(row=20, column=10), Point(row=20, column=12)]
                identifier [Point(row=20, column=13), Point(row=20, column=14)]
              ) [Point(row=20, column=14), Point(row=20, column=15)]
            compound_statement [Point(row=20, column=16), Point(row=23, column=5)]
              { [Point(row=20, column=16), Point(row=20, column=17)]
              expression_statement [Point(row=21, column=6), Point(row=21, column=19)]
                call_expression [Point(row=21, column=6), Point(row=21, column=18)]
                  identifier [Point(row=21, column=6), Point(row=21, column=10)]
                  argument_list [Point(row=21, column=10), Point(row=21, column=18)]
                    ( [Point(row=21, column=10), Point(row=21, column=11)]
                    string_literal [Point(row=21, column=11), Point(row=21, column=17)]
                      " [Point(row=21, column=11), Point(row=21, column=12)]
                      string_content [Point(row=21, column=12), Point(row=21, column=16)]
                      " [Point(row=21, column=16), Point(row=21, column=17)]
                    ) [Point(row=21, column=17), Point(row=21, column=18)]
                ; [Point(row=21, column=18), Point(row=21, column=19)]
              return_statement [Point(row=22, column=6), Point(row=22, column=15)]
                return [Point(row=22, column=6), Point(row=22, column=12)]
                number_literal [Point(row=22, column=13), Point(row=22, column=14)]
                ; [Point(row=22, column=14), Point(row=22, column=15)]
              } [Point(row=23, column=4), Point(row=23, column=5)]
            else_clause [Point(row=23, column=6), Point(row=32, column=5)]
              else [Point(row=23, column=6), Point(row=23, column=10)]
              compound_statement [Point(row=23, column=11), Point(row=32, column=5)]
                { [Point(row=23, column=11), Point(row=23, column=12)]
                if_statement [Point(row=24, column=6), Point(row=31, column=7)]
                  if [Point(row=24, column=6), Point(row=24, column=8)]
                  parenthesized_expression [Point(row=24, column=9), Point(row=24, column=16)]
                    ( [Point(row=24, column=9), Point(row=24, column=10)]
                    binary_expression [Point(row=24, column=10), Point(row=24, column=15)]
                      identifier [Point(row=24, column=10), Point(row=24, column=11)]
                      < [Point(row=24, column=12), Point(row=24, column=13)]
                      identifier [Point(row=24, column=14), Point(row=24, column=15)]
                    ) [Point(row=24, column=15), Point(row=24, column=16)]
                  compound_statement [Point(row=24, column=17), Point(row=28, column=7)]
                    { [Point(row=24, column=17), Point(row=24, column=18)]
                    comment [Point(row=25, column=8), Point(row=25, column=20)]
                    expression_statement [Point(row=26, column=8), Point(row=26, column=24)]
                      call_expression [Point(row=26, column=8), Point(row=26, column=23)]
                        identifier [Point(row=26, column=8), Point(row=26, column=12)]
                        argument_list [Point(row=26, column=12), Point(row=26, column=23)]
                          ( [Point(row=26, column=12), Point(row=26, column=13)]
                          string_literal [Point(row=26, column=13), Point(row=26, column=22)]
                            " [Point(row=26, column=13), Point(row=26, column=14)]
                            string_content [Point(row=26, column=14), Point(row=26, column=21)]
                            " [Point(row=26, column=21), Point(row=26, column=22)]
                          ) [Point(row=26, column=22), Point(row=26, column=23)]
                      ; [Point(row=26, column=23), Point(row=26, column=24)]
                    return_statement [Point(row=27, column=8), Point(row=27, column=17)]
                      return [Point(row=27, column=8), Point(row=27, column=14)]
                      number_literal [Point(row=27, column=15), Point(row=27, column=16)]
                      ; [Point(row=27, column=16), Point(row=27, column=17)]
                    } [Point(row=28, column=6), Point(row=28, column=7)]
                  else_clause [Point(row=28, column=8), Point(row=31, column=7)]
                    else [Point(row=28, column=8), Point(row=28, column=12)]
                    compound_statement [Point(row=28, column=13), Point(row=31, column=7)]
                      { [Point(row=28, column=13), Point(row=28, column=14)]
                      expression_statement [Point(row=29, column=8), Point(row=29, column=25)]
                        call_expression [Point(row=29, column=8), Point(row=29, column=24)]
                          identifier [Point(row=29, column=8), Point(row=29, column=12)]
                          argument_list [Point(row=29, column=12), Point(row=29, column=24)]
                            ( [Point(row=29, column=12), Point(row=29, column=13)]
                            string_literal [Point(row=29, column=13), Point(row=29, column=23)]
                              " [Point(row=29, column=13), Point(row=29, column=14)]
                              string_content [Point(row=29, column=14), Point(row=29, column=22)]
                              " [Point(row=29, column=22), Point(row=29, column=23)]
                            ) [Point(row=29, column=23), Point(row=29, column=24)]
                        ; [Point(row=29, column=24), Point(row=29, column=25)]
                      return_statement [Point(row=30, column=8), Point(row=30, column=17)]
                        return [Point(row=30, column=8), Point(row=30, column=14)]
                        number_literal [Point(row=30, column=15), Point(row=30, column=16)]
                        ; [Point(row=30, column=16), Point(row=30, column=17)]
                      } [Point(row=31, column=6), Point(row=31, column=7)]
                } [Point(row=32, column=4), Point(row=32, column=5)]
          } [Point(row=33, column=2), Point(row=33, column=3)]
      expression_statement [Point(row=34, column=2), Point(row=34, column=20)]
        call_expression [Point(row=34, column=2), Point(row=34, column=19)]
          identifier [Point(row=34, column=2), Point(row=34, column=6)]
          argument_list [Point(row=34, column=6), Point(row=34, column=19)]
            ( [Point(row=34, column=6), Point(row=34, column=7)]
            string_literal [Point(row=34, column=7), Point(row=34, column=18)]
              " [Point(row=34, column=7), Point(row=34, column=8)]
              string_content [Point(row=34, column=8), Point(row=34, column=17)]
              " [Point(row=34, column=17), Point(row=34, column=18)]
            ) [Point(row=34, column=18), Point(row=34, column=19)]
        ; [Point(row=34, column=19), Point(row=34, column=20)]
      return_statement [Point(row=35, column=2), Point(row=35, column=11)]
        return [Point(row=35, column=2), Point(row=35, column=8)]
        number_literal [Point(row=35, column=9), Point(row=35, column=10)]
        ; [Point(row=35, column=10), Point(row=35, column=11)]
      } [Point(row=36, column=0), Point(row=36, column=1)]
  function_definition [Point(row=38, column=0), Point(row=47, column=1)]
    primitive_type [Point(row=38, column=0), Point(row=38, column=3)]
    function_declarator [Point(row=39, column=0), Point(row=39, column=28)]
      identifier [Point(row=39, column=0), Point(row=39, column=4)]
      parameter_list [Point(row=39, column=4), Point(row=39, column=28)]
        ( [Point(row=39, column=4), Point(row=39, column=5)]
        parameter_declaration [Point(row=39, column=5), Point(row=39, column=13)]
          primitive_type [Point(row=39, column=5), Point(row=39, column=8)]
          identifier [Point(row=39, column=9), Point(row=39, column=13)]
        , [Point(row=39, column=13), Point(row=39, column=14)]
        parameter_declaration [Point(row=39, column=15), Point(row=39, column=27)]
          primitive_type [Point(row=39, column=15), Point(row=39, column=19)]
          pointer_declarator [Point(row=39, column=20), Point(row=39, column=27)]
            * [Point(row=39, column=20), Point(row=39, column=21)]
            array_declarator [Point(row=39, column=21), Point(row=39, column=27)]
              identifier [Point(row=39, column=21), Point(row=39, column=25)]
              [ [Point(row=39, column=25), Point(row=39, column=26)]
              ] [Point(row=39, column=26), Point(row=39, column=27)]
        ) [Point(row=39, column=27), Point(row=39, column=28)]
    compound_statement [Point(row=39, column=29), Point(row=47, column=1)]
      { [Point(row=39, column=29), Point(row=39, column=30)]
      declaration [Point(row=40, column=2), Point(row=40, column=24)]
        primitive_type [Point(row=40, column=2), Point(row=40, column=5)]
        init_declarator [Point(row=40, column=6), Point(row=40, column=23)]
          identifier [Point(row=40, column=6), Point(row=40, column=7)]
          = [Point(row=40, column=8), Point(row=40, column=9)]
          call_expression [Point(row=40, column=10), Point(row=40, column=23)]
            identifier [Point(row=40, column=10), Point(row=40, column=14)]
            argument_list [Point(row=40, column=14), Point(row=40, column=23)]
              ( [Point(row=40, column=14), Point(row=40, column=15)]
              subscript_expression [Point(row=40, column=15), Point(row=40, column=22)]
                identifier [Point(row=40, column=15), Point(row=40, column=19)]
                [ [Point(row=40, column=19), Point(row=40, column=20)]
                number_literal [Point(row=40, column=20), Point(row=40, column=21)]
                ] [Point(row=40, column=21), Point(row=40, column=22)]
              ) [Point(row=40, column=22), Point(row=40, column=23)]
        ; [Point(row=40, column=23), Point(row=40, column=24)]
      expression_statement [Point(row=41, column=2), Point(row=41, column=25)]
        assignment_expression [Point(row=41, column=2), Point(row=41, column=24)]
          identifier [Point(row=41, column=2), Point(row=41, column=8)]
          = [Point(row=41, column=9), Point(row=41, column=10)]
          call_expression [Point(row=41, column=11), Point(row=41, column=24)]
            identifier [Point(row=41, column=11), Point(row=41, column=15)]
            argument_list [Point(row=41, column=15), Point(row=41, column=24)]
              ( [Point(row=41, column=15), Point(row=41, column=16)]
              subscript_expression [Point(row=41, column=16), Point(row=41, column=23)]
                identifier [Point(row=41, column=16), Point(row=41, column=20)]
                [ [Point(row=41, column=20), Point(row=41, column=21)]
                number_literal [Point(row=41, column=21), Point(row=41, column=22)]
                ] [Point(row=41, column=22), Point(row=41, column=23)]
              ) [Point(row=41, column=23), Point(row=41, column=24)]
        ; [Point(row=41, column=24), Point(row=41, column=25)]
      declaration [Point(row=42, column=2), Point(row=42, column=23)]
        primitive_type [Point(row=42, column=2), Point(row=42, column=5)]
        init_declarator [Point(row=42, column=6), Point(row=42, column=22)]
          identifier [Point(row=42, column=6), Point(row=42, column=12)]
          = [Point(row=42, column=13), Point(row=42, column=14)]
          call_expression [Point(row=42, column=15), Point(row=42, column=22)]
            identifier [Point(row=42, column=15), Point(row=42, column=19)]
            argument_list [Point(row=42, column=19), Point(row=42, column=22)]
              ( [Point(row=42, column=19), Point(row=42, column=20)]
              identifier [Point(row=42, column=20), Point(row=42, column=21)]
              ) [Point(row=42, column=21), Point(row=42, column=22)]
        ; [Point(row=42, column=22), Point(row=42, column=23)]
      expression_statement [Point(row=44, column=2), Point(row=44, column=33)]
        call_expression [Point(row=44, column=2), Point(row=44, column=32)]
          identifier [Point(row=44, column=2), Point(row=44, column=8)]
          argument_list [Point(row=44, column=8), Point(row=44, column=32)]
            ( [Point(row=44, column=8), Point(row=44, column=9)]
            string_literal [Point(row=44, column=9), Point(row=44, column=23)]
              " [Point(row=44, column=9), Point(row=44, column=10)]
              string_content [Point(row=44, column=10), Point(row=44, column=20)]
              escape_sequence [Point(row=44, column=20), Point(row=44, column=22)]
              " [Point(row=44, column=22), Point(row=44, column=23)]
            , [Point(row=44, column=23), Point(row=44, column=24)]
            identifier [Point(row=44, column=25), Point(row=44, column=31)]
            ) [Point(row=44, column=31), Point(row=44, column=32)]
        ; [Point(row=44, column=32), Point(row=44, column=33)]
      return_statement [Point(row=46, column=2), Point(row=46, column=11)]
        return [Point(row=46, column=2), Point(row=46, column=8)]
        number_literal [Point(row=46, column=9), Point(row=46, column=10)]
        ; [Point(row=46, column=10), Point(row=46, column=11)]
      } [Point(row=47, column=0), Point(row=47, column=1)]